{"version":3,"file":"nfts.js","sourceRoot":"","sources":["../../src/api/nfts.ts"],"names":[],"mappings":"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","sourcesContent":["import { getAddress } from 'viem';\n\ndeclare const NFT_API_BASE_URI: string;\n\nexport type HeldNft = {\n  collection: string;\n  id: number;\n  holder: string;\n  type?: string | null;\n  gender?: string | null;\n  parts?: string | null; // JSON string일 수 있음\n  image?: string | null; // 상대/절대 경로 모두 가능\n  contract_addr?: string;\n};\n\nexport type FetchHeldNftsOptions = {\n  collection?: string;     // 특정 컬렉션만 필터링할 때\n  start?: number;          // 토큰 범위 시작 (백엔드가 지원하면)\n  end?: number;            // 토큰 범위 끝\n  cursor?: string;         // 페이지네이션 커서(지원 시)\n  limit?: number | string; // 페이지 크기(지원 시)\n};\n\n/**\n * 지갑 주소가 보유한 NFT 전체를 조회\n * 백엔드 라우팅이 `/{holder}/nfts` (endsWith('/nfts'))인 점을 활용합니다.\n */\nexport async function fetchHeldNfts(\n  holder: string,\n  opts: FetchHeldNftsOptions = {}\n): Promise<HeldNft[]> {\n  if (!holder) return [];\n\n  const normalized = getAddress(holder);\n  const url = new URL(`${NFT_API_BASE_URI}/${normalized}/nfts`);\n\n  // 백엔드가 지원하는 쿼리만 붙여주세요.\n  if (opts.collection) url.searchParams.set('collection', opts.collection);\n  if (opts.start !== undefined) url.searchParams.set('start', String(opts.start));\n  if (opts.end !== undefined) url.searchParams.set('end', String(opts.end));\n  if (opts.limit !== undefined) url.searchParams.set('limit', String(opts.limit));\n  if (opts.cursor) url.searchParams.set('cursor', opts.cursor);\n\n  const res = await fetch(url.toString(), {\n    method: 'GET',\n    headers: { 'Content-Type': 'application/json' },\n  });\n\n  if (!res.ok) {\n    const text = await res.text().catch(() => '');\n    console.error(`fetchHeldNfts failed: ${res.status} ${res.statusText}`, text);\n    throw new Error(`Failed to fetch held NFTs: ${res.status}`);\n  }\n\n  const data = await res.json();\n  // 배열 또는 { items, nextCursor } 형태 모두 대응\n  const items: HeldNft[] = Array.isArray(data) ? data : (data?.items ?? []);\n  return items;\n}\n\n/** 선택적으로 토큰 id 목록으로 상세를 받아와야 할 때 (백엔드에 /nfts/by-ids 존재) */\nexport async function fetchNftsByIds(params: {\n  nft_address: string;\n  token_ids: (number | string)[];\n}): Promise<HeldNft[]> {\n  const body = {\n    nft_address: getAddress(params.nft_address),\n    token_ids: params.token_ids.map(id => Number(id)),\n  };\n\n  const res = await fetch(`${NFT_API_BASE_URI}/nfts/by-ids`, {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify(body),\n    credentials: 'include',\n  });\n\n  if (!res.ok) {\n    const text = await res.text().catch(() => '');\n    console.error(`fetchNftsByIds failed: ${res.status} ${res.statusText}`, text);\n    throw new Error(`Failed to fetch NFTs by ids: ${res.status}`);\n  }\n\n  const items: HeldNft[] = await res.json();\n  return items;\n}\n"]}