{"version":3,"file":"profile.js","sourceRoot":"","sources":["../../src/api/profile.ts"],"names":[],"mappings":"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","sourcesContent":["import { z } from 'zod';\n\ndeclare const API_URI: string;\n\nexport type Profile = {\n  nickname?: string;\n  bio?: string;\n};\n\nconst ProfileSchema = z.object({\n  nickname: z.string().optional(),\n  bio: z.string().optional()\n});\n\ntype SetProfilePayload = {\n  nickname?: string;\n  bio?: string;\n};\n\ntype SetProfileResponse = {\n  success: boolean;\n};\n\n/**\n * 프로필을 설정합니다.\n */\nexport async function setProfile(\n  payload: SetProfilePayload,\n  token: string\n): Promise<SetProfileResponse> {\n  const res = await fetch(`${API_URI}/profile`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${token}`\n    },\n    body: JSON.stringify(payload)\n  });\n\n  const text = await res.text();\n\n  if (!res.ok) {\n    throw new Error(\n      `프로필 설정에 실패했습니다. (status: ${res.status})\\n${text}`\n    );\n  }\n\n  try {\n    const json = JSON.parse(text);\n    if (typeof json.success === 'boolean') {\n      return json as SetProfileResponse;\n    } else {\n      throw new Error('서버 응답이 올바르지 않습니다.');\n    }\n  } catch (e) {\n    throw new Error(`응답 파싱 오류: ${(e as Error).message}`);\n  }\n}\n\n/**\n * 프로필을 가져옵니다.\n */\nexport async function fetchProfile(\n  address: `0x${string}`\n): Promise<Profile> {\n  const res = await fetch(`${API_URI}/profile?address=${address}`);\n\n  const text = await res.text();\n\n  if (!res.ok) {\n    throw new Error(\n      `프로필 조회에 실패했습니다. (status: ${res.status})\\n${text}`\n    );\n  }\n\n  try {\n    const json = JSON.parse(text);\n    const parsed = ProfileSchema.safeParse(json);\n    if (!parsed.success) {\n      throw new Error('서버에서 잘못된 프로필 데이터를 반환했습니다.');\n    }\n    return parsed.data;\n  } catch (e) {\n    throw new Error(`응답 파싱 오류: ${(e as Error).message}`);\n  }\n}\n\n/**\n * 여러 프로필을 가져옵니다.\n */\nexport async function fetchProfiles(\n  addresses: (`0x${string}`)[]\n): Promise<Record<`0x${string}`, Profile | null>> {\n  const res = await fetch(`${API_URI}/profiles`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ addresses })\n  });\n\n  const text = await res.text();\n\n  if (!res.ok) {\n    throw new Error(\n      `프로필 조회에 실패했습니다. (status: ${res.status})\\n${text}`\n    );\n  }\n\n  try {\n    const json = JSON.parse(text);\n\n    if (typeof json !== 'object' || json === null) {\n      throw new Error('응답이 객체가 아닙니다.');\n    }\n\n    const result: Record<`0x${string}`, Profile | null> = {};\n\n    for (const [key, value] of Object.entries(json)) {\n      if (typeof key !== 'string' || !key.startsWith('0x')) continue;\n\n      const parsed = ProfileSchema.safeParse(value);\n      result[key as `0x${string}`] = parsed.success ? parsed.data : null;\n    }\n\n    return result;\n  } catch (e) {\n    throw new Error(`응답 파싱 오류: ${(e as Error).message}`);\n  }\n}\n"]}