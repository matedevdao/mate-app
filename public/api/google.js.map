{"version":3,"file":"google.js","sourceRoot":"","sources":["../../src/api/google.ts"],"names":[],"mappings":"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","sourcesContent":["declare const API_BASE_URI: string;\n\nconst GOOGLE_ME_PATH = `${API_BASE_URI}/google-me`;\nconst GOOGLE_ME_BY_WALLET_PATH = `${API_BASE_URI}/google-me-by-wallet`;\nconst GOOGLE_LOGOUT_PATH = `${API_BASE_URI}/google-logout`;\nconst LINK_WALLET_PATH = `${API_BASE_URI}/google-link-web3-wallet`;\nconst UNLINK_WALLET_BY_TOKEN_PATH = `${API_BASE_URI}/google-unlink-web3-wallet-by-token`;\nconst UNLINK_WALLET_BY_SESSION_PATH = `${API_BASE_URI}/google-unlink-web3-wallet-by-session`;\nconst GOOGLE_VERIFY_PATH = `${API_BASE_URI}/oauth2/verify`;\n\nexport type GoogleProfile = {\n  sub?: string;\n  email?: string;\n  name?: string;\n  picture?: string;\n};\n\nexport type GoogleMe = {\n  ok?: boolean;\n  token?: string;\n  wallet_address?: `0x${string}` | null;\n  profile?: GoogleProfile;\n  error?: string;\n};\n\nexport type GoogleMeByWallet = {\n  ok?: boolean;\n  wallet_address?: `0x${string}`;\n  google_sub?: string;\n  token?: string;\n  linked_at?: number;\n  // 프로필 확장 필드가 있다면 서버 응답에 맞춰 추가:\n  profile?: GoogleProfile;\n  error?: string;\n};\n\nexport type LinkWalletResult = {\n  ok?: boolean;\n  wallet_address?: `0x${string}`;\n  google_sub?: string;\n  token?: string;\n  linked_at?: number;\n  profile?: GoogleProfile;\n  error?: string;\n};\n\nexport type UnlinkWalletResult = {\n  ok?: boolean;\n  error?: string;\n};\n\n// ─────────────────────────────────────────────────────────────\n// Common fetch helpers\n// ─────────────────────────────────────────────────────────────\nasync function parseError(res: Response, fallback: string) {\n  let message = `${fallback}: ${res.status}`;\n  try {\n    const data = await res.json();\n    if ((data as any)?.error) message = (data as any).error;\n  } catch {\n    try {\n      const text = await res.text();\n      if (text) message = text;\n    } catch { /* ignore */ }\n  }\n  throw new Error(message);\n}\n\nasync function getJson<T>(url: string): Promise<T> {\n  const res = await fetch(url, { method: 'GET', headers: { 'Content-Type': 'application/json' } });\n  if (!res.ok) await parseError(res, `GET ${url} failed`);\n  return (await res.json()) as T;\n}\n\nasync function getJsonAuth<T>(url: string, authToken: string): Promise<T> {\n  if (!authToken) throw new Error('Missing authorization token.');\n  const res = await fetch(url, {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${authToken}`,\n    },\n  });\n  if (!res.ok) await parseError(res, `GET ${url} failed`);\n  return (await res.json()) as T;\n}\n\nasync function postJson<T>(url: string, body?: unknown): Promise<T> {\n  const res = await fetch(url, {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: body ? JSON.stringify(body) : undefined,\n  });\n  if (!res.ok) await parseError(res, `POST ${url} failed`);\n  try { return (await res.json()) as T; } catch { return {} as T; }\n}\n\nasync function postJsonAuth<T>(url: string, authToken: string, body?: unknown): Promise<T> {\n  if (!authToken) throw new Error('Missing authorization token.');\n  const res = await fetch(url, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${authToken}`,\n    },\n    body: body ? JSON.stringify(body) : undefined,\n  });\n  if (!res.ok) await parseError(res, `POST ${url} failed`);\n  try { return (await res.json()) as T; } catch { return {} as T; }\n}\n\n// ─────────────────────────────────────────────────────────────\n// Public APIs\n// ─────────────────────────────────────────────────────────────\n\n/** 쿠키 세션 기반: 내 세션/토큰/지갑 상태 조회 */\nexport async function fetchGoogleMe(): Promise<GoogleMe> {\n  return await getJson<GoogleMe>(GOOGLE_ME_PATH);\n}\n\n/** 지갑 JWT 기반: 지갑 주소로 연동된 Google 계정 조회 */\nexport async function fetchGoogleMeByWallet(authToken: string): Promise<GoogleMeByWallet> {\n  return await getJsonAuth<GoogleMeByWallet>(GOOGLE_ME_BY_WALLET_PATH, authToken);\n}\n\n/** 쿠키 세션 기반: 서버 세션 로그아웃 */\nexport async function logoutGoogle(): Promise<void> {\n  await postJson(GOOGLE_LOGOUT_PATH);\n}\n\n/** 지갑 JWT 기반: Google 계정과 Web3 지갑 주소 링크 */\nexport async function linkGoogleWeb3Wallet(authToken: string): Promise<LinkWalletResult> {\n  // 서버는 바디를 사용하지 않으므로 빈 바디\n  return await postJsonAuth<LinkWalletResult>(LINK_WALLET_PATH, authToken, {});\n}\n\n/** 지갑 JWT 기반: 링크 해제 */\nexport async function unlinkGoogleWeb3WalletByToken(authToken: string): Promise<UnlinkWalletResult> {\n  return await postJsonAuth<UnlinkWalletResult>(UNLINK_WALLET_BY_TOKEN_PATH, authToken, {});\n}\n\n/** 쿠키 세션 기반: 링크 해제 */\nexport async function unlinkGoogleWeb3WalletBySession(): Promise<UnlinkWalletResult> {\n  return await postJson<UnlinkWalletResult>(UNLINK_WALLET_BY_SESSION_PATH);\n}\n\nexport type VerifyPayload = {\n  provider: \"google\";\n  idToken: string;\n  nonce: string;\n};\n\nexport type VerifyResult = {\n  ok?: boolean;\n  // 서버가 로그인과 동시에 세션/토큰을 내려줄 수도 있음\n  token?: string;\n  profile?: GoogleProfile;\n  wallet_address?: `0x${string}` | null;\n  error?: string;\n};\n\nasync function postJsonWithCreds<T>(url: string, body?: unknown, credentials: RequestCredentials = \"include\"): Promise<T> {\n  const res = await fetch(url, {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    credentials,\n    body: body ? JSON.stringify(body) : undefined,\n  });\n  if (!res.ok) await parseError(res, `POST ${url} failed`);\n  try { return (await res.json()) as T; } catch { return {} as T; }\n}\n\n/** ID 토큰 검증 전담: 서버가 ID 토큰/nonce 검증 및 세션 수립 */\nexport async function verifyGoogleLogin(payload: VerifyPayload): Promise<VerifyResult> {\n  // 보안/쿠키 세팅 목적상 credentials: 'include' 유지\n  return await postJsonWithCreds<VerifyResult>(GOOGLE_VERIFY_PATH, payload, \"include\");\n}\n"]}