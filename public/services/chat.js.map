{"version":3,"file":"chat.js","sourceRoot":"","sources":["../../src/services/chat.ts"],"names":[],"mappings":"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","sourcesContent":["import { TokenManager } from '../auth/token-mananger';\nimport { Attachment, ChatMessage } from '../types/chat';\n\ndeclare const API_URI: string;\n\nclass ChatService extends EventTarget {\n  private roomId: string;\n\n  private abortController: AbortController | null = null;\n  private currentPromise: Promise<void> | null = null;\n\n  private reconnectDelay = 3000;\n  private stopped = false;\n\n  constructor(roomId: string) {\n    super();\n    this.roomId = roomId;\n  }\n\n  /** SSE 연결 시작 */\n  connect() {\n    this.#connectSSE().catch(console.error);\n  }\n\n  /** 연결 중단(페이지 언마운트 시 호출) */\n  disconnect() {\n    this.stopped = true;\n    this.abortController?.abort();\n  }\n\n  /** 텍스트 메시지 전송 → 서버가 확정한 ChatMessage 반환 */\n  async send(text: string, attachments: Attachment[] = [], localId: string): Promise<ChatMessage> {\n    const token = TokenManager.getToken();\n    const resp = await fetch(`${API_URI}/chat/${this.roomId}/send`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${token}`,\n      },\n      body: JSON.stringify({ text, attachments, localId }),\n    });\n\n    if (!resp.ok) {\n      const err = new Error(`Send failed ${resp.status}`);\n      this.dispatchEvent(new CustomEvent('error', { detail: err }));\n      throw err;\n    }\n\n    const msg: ChatMessage = await resp.json();\n    return msg;\n  }\n\n  /* ------------------------------------------------------------------ */\n  /*                           내부 구현부                               */\n  /* ------------------------------------------------------------------ */\n\n  async #connectSSE() {\n    if (this.stopped) return;\n\n    // 기존 연결 정리\n    if (this.abortController) {\n      this.abortController.abort();\n      if (this.currentPromise) {\n        try {\n          await this.currentPromise;\n        } catch {/* ignore */ }\n      }\n    }\n\n    this.abortController = new AbortController();\n\n    this.currentPromise = (async () => {\n      let reader: ReadableStreamDefaultReader | null = null;\n      let buffer = '';\n\n      try {\n        const resp = await fetch(`${API_URI}/chat/${this.roomId}/stream`, {\n          headers: { Authorization: `Bearer ${TokenManager.getToken()}` },\n          signal: this.abortController!.signal,\n        });\n\n        if (!resp.ok || !resp.body) {\n          throw new Error(`SSE failed ${resp.status}`);\n        }\n\n        // 성공적으로 연결되면 재연결 지연 초기화\n        this.reconnectDelay = 3000;\n        reader = resp.body.getReader();\n        const decoder = new TextDecoder();\n\n        while (true) {\n          const { done, value } = await reader.read();\n          if (done) break;\n\n          buffer += decoder.decode(value, { stream: true });\n          const chunks = buffer.split('\\n\\n');\n          buffer = chunks.pop() || '';\n\n          for (const chunk of chunks) {\n            if (chunk.startsWith('data: ')) {\n              const msg: ChatMessage = JSON.parse(chunk.slice(6));\n              this.dispatchEvent(new CustomEvent('message', { detail: msg }));\n            }\n          }\n        }\n      } catch (err) {\n        if (!this.abortController!.signal.aborted) {\n          this.dispatchEvent(new CustomEvent('error', { detail: err }));\n        }\n      } finally {\n        try { await reader?.cancel(); } catch {/* ignore */ }\n        this.#scheduleReconnect();\n      }\n    })();\n  }\n\n  #scheduleReconnect() {\n    if (this.stopped) return;\n    setTimeout(() => {\n      this.reconnectDelay = Math.min(this.reconnectDelay * 1.5, 60000);\n      this.#connectSSE().catch(console.error);\n    }, this.reconnectDelay);\n  }\n}\n\nexport { ChatMessage, ChatService };\n\n"]}