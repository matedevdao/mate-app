{"version":3,"file":"profile.js","sourceRoot":"","sources":["../../src/services/profile.ts"],"names":[],"mappings":"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","sourcesContent":["import { tokenManager } from '@gaiaprotocol/client-common';\nimport { getAddress } from 'viem';\nimport { fetchProfile } from '../api/profile';\n\n/** 캐시에 저장되는 구조 */\ntype ProfileEntry = {\n  nickname?: string | null;\n  bio?: string | null;\n  fetchedAt: number;\n};\n\nconst TTL = 10 * 60 * 1000; // 10분\n\nclass ProfileService extends EventTarget {\n  #cache = new Map<string, ProfileEntry>();\n  #inflight = new Set<string>();\n\n  /** 주소를 등록(=프리로드). */\n  preload(accounts: string[]) {\n    const toFetch = accounts\n      .map(a => getAddress(a))\n      .filter(a => this.#needsRefresh(a));\n    if (toFetch.length) this.#fetchBatch(toFetch);\n  }\n\n  /**\n   * 비동기로 최신 프로필을 반환.\n   */\n  async resolve(account: string): Promise<ProfileEntry | undefined> {\n    const addr = getAddress(account);\n    if (this.#needsRefresh(addr)) await this.#fetchBatch([addr]);\n    return this.#cache.get(addr);\n  }\n\n  /**\n   * 캐시된(혹은 오래된) 값 그대로 반환. 없으면 undefined\n   */\n  getCached(account: string): ProfileEntry | undefined {\n    return this.#cache.get(getAddress(account));\n  }\n\n  /**\n   * 강제로 프로필을 주입합니다.\n   */\n  setProfile(account: string, nickname?: string, bio?: string) {\n    const addr = getAddress(account);\n    const prev = this.#cache.get(addr);\n\n    this.#cache.set(addr, {\n      nickname,\n      bio,\n      fetchedAt: Date.now()\n    });\n\n    this.#emitIfChanged(addr, prev, { nickname, bio });\n  }\n\n  /* ---------- 내부 ---------- */\n\n  #needsRefresh(addr: string) {\n    const entry = this.#cache.get(getAddress(addr));\n    return !entry || Date.now() - entry.fetchedAt > TTL;\n  }\n\n  async #fetchBatch(addresses: string[], force = false) {\n    const targets = addresses.filter(a => {\n      if (this.#inflight.has(a)) return false;\n      if (!force && !this.#needsRefresh(a)) return false;\n      return true;\n    });\n    if (!targets.length) return;\n\n    targets.forEach(a => this.#inflight.add(a));\n\n    try {\n      const results = await Promise.all(\n        targets.map(async addr => {\n          const profile = await fetchProfile(addr as `0x${string}`);\n          return [getAddress(addr), profile] as const;\n        })\n      );\n\n      for (const [addr, profile] of results) {\n        const prev = this.#cache.get(addr);\n\n        this.#cache.set(addr, {\n          nickname: profile?.nickname ?? null,\n          bio: profile?.bio ?? null,\n          fetchedAt: Date.now()\n        });\n\n        this.#emitIfChanged(addr, prev, profile);\n      }\n    } finally {\n      targets.forEach(a => this.#inflight.delete(a));\n    }\n  }\n\n  #emitIfChanged(addr: string, prev?: ProfileEntry, next?: { nickname?: string | null, bio?: string | null }) {\n    if (\n      prev?.nickname !== next?.nickname ||\n      prev?.bio !== next?.bio\n    ) {\n      this.dispatchEvent(\n        new CustomEvent('profilechange', { detail: { account: addr, profile: next } })\n      );\n      if (addr === tokenManager.getAddress()) {\n        this.dispatchEvent(new Event('myprofilechange'));\n      }\n    }\n  }\n}\n\nexport const profileService = new ProfileService();\n"]}